# logic to scan .py file, detect functions/classes
import ast
import os

def extract_classes_and_functions(source: str):
    """Extract classes and functions from Python source code."""
    try:
        tree = ast.parse(source)
    except SyntaxError as e:
        raise SyntaxError(f"Invalid Python syntax: {e}")

    data = {"functions": [], "classes": {}}

    for node in tree.body:
        if isinstance(node, ast.FunctionDef):
            # Skip private functions (starting with _)
            if not node.name.startswith('_'):
                data["functions"].append(node.name)

        elif isinstance(node, ast.ClassDef):
            # Skip private classes (starting with _)
            if not node.name.startswith('_'):
                methods = [
                    n.name for n in node.body 
                    if isinstance(n, ast.FunctionDef) and not n.name.startswith('_')
                ]
                data["classes"][node.name] = methods

    return data

def generate_function_test_stub(func_name):
    """Generate a test stub for a function."""
    return f"""def test_{func_name}():
    \"\"\"Test for function {func_name}.\"\"\"
    # TODO: implement test for {func_name}
    assert False, "Test not implemented"
"""

def generate_method_test_stub(class_name, method_name):
    """Generate a test stub for a class method."""
    return f"""    def test_{method_name}(self):
        \"\"\"Test for {class_name}.{method_name}.\"\"\"
        # TODO: implement test for {class_name}.{method_name}
        assert False, "Test not implemented"
"""

def generate_test_from_file(input_file):
    """Generate test stubs from a Python source file."""
    
    if not os.path.exists(input_file):
        raise FileNotFoundError(f"{input_file} not found")

    with open(input_file, "r") as f:
        source = f.read()
    
    extracted_data = extract_classes_and_functions(source)
    
    # Generate test file header - simplified for pytest only
    test_code = f'''"""
Auto-generated test file for {os.path.basename(input_file)}
Generated by TestMaker
"""

import pytest

'''

    # Import the module being tested
    module_name = os.path.splitext(os.path.basename(input_file))[0]
    test_code += f"# from {module_name} import *  # Uncomment when ready to import\n\n"

    # Generate test stubs for top-level functions
    if extracted_data["functions"]:
        test_code += "# Tests for top-level functions\n"
        for func in extracted_data["functions"]:
            test_code += generate_function_test_stub(func)
        test_code += "\n"

    # Generate test stubs for class methods
    if extracted_data["classes"]:
        test_code += "# Tests for classes\n"
        for cls_name, methods in extracted_data["classes"].items():
            test_code += f"class Test{cls_name}:\n"
            test_code += f'    """Test cases for {cls_name} class."""\n\n'
            
            if not methods:
                test_code += "    pass\n\n"
            else:
                for method in methods:
                    test_code += generate_method_test_stub(cls_name, method)
                test_code += "\n"

    # Add a note if no testable elements were found
    if not extracted_data["functions"] and not extracted_data["classes"]:
        test_code += "# No testable functions or classes found in the source file\n"
        test_code += "# (Private elements starting with _ are skipped)\n"

    return test_code